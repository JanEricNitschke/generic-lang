class Error1 < Exception {}
class Error2 < Exception {}

fun inner_1() {
    try {
        throw Error2("error message");
        print("Try");
    } catch Error1 as e {
        print(e);
    } else {
        print("Else Inner");
    }
}

fun inner_2() {
    try {
        throw Error1("error message");
        print("Try");
    } catch Error1 as e {
        print(e); 
    } else {
        print("Else Inner");
    }
}


try {
    inner_1();
} catch Error2 as e {
    print(e); # expect: Error2: error message
              # expect: Traceback (most recent call last):
              # expect:   File "test/exceptions/catch_nested.gen", line 28, in <script>
              # expect:         inner_1();
              # expect:         ~~~~~~~^^ 
              # expect:   File "test/exceptions/catch_nested.gen", line 6, in inner_1
              # expect:             throw Error2("error message");
              # expect:             ~~~~~~^^^^^^^^^^^^^^^^^^^^^^^ 
} else {
    print("Else Outer");
}

try {
    inner_2(); # expect: Error1: error message
               # expect: Traceback (most recent call last):
               # expect:   File "test/exceptions/catch_nested.gen", line 43, in <script>
               # expect:         inner_2(); # expect: Error1: error message
               # expect:         ~~~~~~~^^                                 
               # expect:   File "test/exceptions/catch_nested.gen", line 17, in inner_2
               # expect:             throw Error1("error message");
               # expect:             ~~~~~~^^^^^^^^^^^^^^^^^^^^^^^ 
} catch Error2 as e {
    print(e);
} else {
    print("Else Outer"); # expect: Else Outer
}

print("Done"); # expect: Done

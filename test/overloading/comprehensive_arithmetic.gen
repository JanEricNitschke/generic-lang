# Comprehensive test showing all implemented operator overloading
# Demonstrates __add__, __sub__, and __mul__ overloading

class Vector {
    __init__(x, y) {
        this.x = x;
        this.y = y;
    }

    __add__(other) {
        return Vector(this.x + other.x, this.y + other.y);
    }

    __sub__(other) {
        return Vector(this.x - other.x, this.y - other.y);
    }

    __mul__(scalar) {
        return Vector(this.x * scalar, this.y * scalar);
    }
}

print("=== Vector Arithmetic Overloading Demo ===");

var v1 = Vector(3, 4);
var v2 = Vector(1, 2);

# Test addition
var sum = v1 + v2;
print("Addition result:"); 
print(sum.x); # expect: 4
print(sum.y); # expect: 6

# Test subtraction  
var diff = v1 - v2;
print("Subtraction result:");
print(diff.x); # expect: 2
print(diff.y); # expect: 2

# Test multiplication (scaling)
var scaled = v1 * 2;
print("Multiplication result:");
print(scaled.x); # expect: 6
print(scaled.y); # expect: 8

print("=== Backward Compatibility ===");

# Test that regular numeric operations still work
print(5 + 3); # expect: 8
print(10 - 4); # expect: 6
print(7 * 6); # expect: 42

# Test that string concatenation still works
print("Hello" + " World"); # expect: Hello World